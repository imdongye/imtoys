#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;

layout(std430, binding=0) readonly  buffer buf_x_s {
    float x_s[];
};
layout(std430, binding=1) writeonly buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=2)           buffer buf_v_s {
    float v_s[];
};
layout(std430, binding=3) readonly  buffer buf_w_s {
    float w_s[];
};

uniform int nr_ptcls;
uniform vec3 gravity;
uniform float air_drag;
uniform float inv_body_mass;
uniform float dt;

uint idxV1, idxV2, idxV3;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if( idx >= nr_ptcls )
        return;
    idxV1 = idx*3;
    idxV2 = idxV1+1;
    idxV3 = idxV2+1;

    float w = w_s[idx];
    if( w==0.f ) {
        p_s[idxV1] = x_s[idxV1];
        p_s[idxV2] = x_s[idxV2];
        p_s[idxV3] = x_s[idxV3];
        return;
    }

    vec3 v;
    v.x = v_s[idxV1];
    v.y = v_s[idxV2];
    v.z = v_s[idxV3];

    vec3 acc = gravity;
    // acc -= (air_drag*inv_body_mass) * v;
    v += acc*dt;
    v_s[idxV1] = v.x;
    v_s[idxV2] = v.y;
    v_s[idxV3] = v.z;
    
    vec3 dx = v*dt;
    p_s[idxV1] = x_s[idxV1] + dx.x;
    p_s[idxV2] = x_s[idxV2] + dx.y;
    p_s[idxV3] = x_s[idxV3] + dx.z;
}
