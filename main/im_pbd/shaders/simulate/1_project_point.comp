#version 460 core
layout(local_size_x = 1, local_size_y = 1) in;


layout(std430, binding=1) buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=3) readonly buffer buf_w_s {
    float w_s[];
};

struct ConstraintPoint {
    vec4 point_and_dist;
    int idx_p;
};
layout(std430, binding=5) readonly buffer buf_c_points {
    ConstraintPoint c_points[];
};

uniform float alpha;

void main()
{
    int idxC = int(gl_GlobalInvocationID.x);
    ConstraintPoint cPoint = c_points[idxC];
    int idxP = cPoint.idx_p;

    float w = w_s[idxP];
    if( w==0.0 ) {
        return;
    }

    float denom = w + 0.0 + alpha;
    if( denom < 0.0000000001 ) {
        return;
    }
    int idxP1 = idxP*3;
    int idxP2 = idxP1+1;
    int idxP3 = idxP2+1;
    vec3 p = vec3(p_s[idxP1], p_s[idxP2], p_s[idxP3]);
    vec3 point = cPoint.point_and_dist.xyz;
    
    vec3 diff = p - point;
    float dist = length(diff);
    float C = dist - cPoint.point_and_dist.w;
    vec3 dC = diff / dist;

    
    float lambda = C / denom;
    p -= lambda*w*dC;
    p_s[idxP1] = p.x;
    p_s[idxP2] = p.y;
    p_s[idxP3] = p.z;
}
