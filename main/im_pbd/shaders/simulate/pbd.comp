#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;

layout(std430, binding=0) buffer buf_x_s {
    float x_s[];
};
layout(std430, binding=1) buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=2) buffer buf_v_s {
    float v_s[];
};
layout(std430, binding=3) buffer buf_w_s {
    float w_s[];
};

struct ConstraintDist {
    int idx_p;
    float ori_dist;
};
layout(std430, binding=4) readonly buffer buf_c_stretchs {
    ConstraintDist c_stretchs[];
};
layout(std430, binding=5) readonly buffer buf_c_stretch_offsets {
    ivec2 c_stretch_offsets[];
};


layout(std430, binding=10) buffer buf_debugs {
    vec4 debugs[];
};



uniform int nr_ptcls;
uniform vec3 gravity;
uniform float air_drag;
uniform float inv_body_mass;
uniform int nr_steps;

uniform float dt;
uniform float subDt;

uniform float alpha_stretch;

vec3 getP(int idx) {
    int base = idx*3;
    return vec3(p_s[base], p_s[base+1], p_s[base+2]);
}


void main()
{
    int idxV1, idxV2, idxV3;
    int idxP = int(gl_GlobalInvocationID.x);
    float w;
    vec3 x, p, v;
    int i, j;

    float sqSubDt = subDt*subDt;

    vec3 surfNor = {0,1,0};
    float friction = 0.8;
    float restitution = 0.8;
    
    ivec2 cOffset;
    ConstraintDist cDistInfo;
    vec3 oppP, diff, dC;
    float dist, oppW, C, lambda, denom;


    if( idxP >= nr_ptcls )
        return;
    idxV1 = idxP*3;
    idxV2 = idxV1+1;
    idxV3 = idxV2+1;

    w = w_s[idxP];
    if( w==0.0 ) {
        p_s[idxV1] = x_s[idxV1];
        p_s[idxV2] = x_s[idxV2];
        p_s[idxV3] = x_s[idxV3];
        return;
    }

    x = vec3(x_s[idxV1], x_s[idxV2], x_s[idxV3]);
    v = vec3(v_s[idxV1], v_s[idxV2], v_s[idxV3]);
    for( i=0; i<nr_steps; i++ )
    {
        // update v & p (external force) ======================
        vec3 acc = gravity;
        // acc -= (air_drag*inv_body_mass) * v;
        v += acc*subDt;
        p = x + v*subDt;
        p_s[idxV1] = p.x; p_s[idxV2] = p.y; p_s[idxV3] = p.z;  

        memoryBarrierBuffer();




        // project constriants ================================
        cOffset = c_stretch_offsets[idxP];
        for( j=cOffset.x; j<cOffset.y; j++ ) {
            cDistInfo = c_stretchs[j];
            oppP = getP(cDistInfo.idx_p);
            oppW = w_s[cDistInfo.idx_p];

            diff = p - oppP;
            dist = length(diff);
            C = dist - cDistInfo.ori_dist;
            dC = diff / dist;

            denom = w + oppW + alpha_stretch;
            if( denom < 0.0000000001 ) {
                continue;
            }
            lambda = C / denom;
            p -= lambda*w*dC;
        }
        debugs[idxP].x = cOffset.x;
        debugs[idxP].y = cOffset.y;


        // update v & x ==================================
        v = (p-x)/subDt;
        x = p;


        // apply collision ==================================
        float signedDist = x.y-0.01;
        if( signedDist<0.0 ) {
            float vdn = dot( surfNor, v );
            if( vdn<0.0 ) {
                vec3 vNor = vdn*surfNor;
                vec3 vTan = v-vNor;
                v = (friction*vTan)-(restitution*vNor);
                x -= signedDist*surfNor;
            }
        }
    }
    
    v_s[idxV1] = v.x;
    v_s[idxV2] = v.y;
    v_s[idxV3] = v.z;
    
    x_s[idxV1] = x.x;
    x_s[idxV2] = x.y;
    x_s[idxV3] = x.z;
    memoryBarrierBuffer();
}
