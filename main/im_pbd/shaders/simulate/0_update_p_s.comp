#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;

layout(std430, binding=0) readonly  buffer buf_x_s {
    float x_s[];
};
layout(std430, binding=1) writeonly buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=2) buffer buf_v_s {
    float v_s[];
};
layout(std430, binding=3) readonly  buffer buf_w_s {
    float w_s[];
};

uniform int nr_ptcls;
uniform vec3 gravity;
uniform float air_drag;
uniform float inv_body_mass;
uniform float dt;


void main()
{
    int idxP = int(gl_GlobalInvocationID.x);
    if( idxP >= nr_ptcls ) {
        return;
    }

    int idxP1 = idxP*3;
    int idxP2 = idxP1+1;
    int idxP3 = idxP2+1;

    float w = w_s[idxP];
    if( w==0.0 ) {
        p_s[idxP1] = x_s[idxP1];
        p_s[idxP2] = x_s[idxP2];
        p_s[idxP3] = x_s[idxP3];
        return;
    }
    
    vec3 v = vec3(v_s[idxP1], v_s[idxP2], v_s[idxP3]);

    vec3 acc = gravity;
    acc -= (air_drag*inv_body_mass) * v;
    v  += acc*dt;

    vec3 x = vec3(x_s[idxP1], x_s[idxP2], x_s[idxP3]);
    vec3 p = x + v*dt;

    p_s[idxP1] = p.x;
    p_s[idxP2] = p.y;
    p_s[idxP3] = p.z;

    v_s[idxP1] = v.x;
    v_s[idxP2] = v.y;
    v_s[idxP3] = v.z;
}
