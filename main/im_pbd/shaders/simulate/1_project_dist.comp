#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;


layout(std430, binding=1) buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=3) readonly buffer buf_w_s {
    float w_s[];
};


struct ConstraintDist {
    int idx_p;
    float ori_dist;
};
layout(std430, binding=5) readonly buffer buf_c_dists {
    ConstraintDist c_dists[];
};
layout(std430, binding=6) readonly buffer buf_c_dist_offsets {
    ivec2 c_dist_offsets[];
};


uniform int nr_ptcls;
uniform float alpha;

vec3 getP(int idx) {
    int base = idx*3;
    return vec3(p_s[base], p_s[base+1], p_s[base+2]);
}

void main()
{
    int idxP = int(gl_GlobalInvocationID.x);
    if( idxP >= nr_ptcls ){
        return;
    }

    float w = w_s[idxP];
    if( w==0.0 ) {
        return;
    }
    int idxV1 = idxP*3;
    int idxV2 = idxV1+1;
    int idxV3 = idxV2+1;
    vec3 p = vec3(p_s[idxV1], p_s[idxV2], p_s[idxV3]);
    
    ivec2 offsets = c_dist_offsets[idxP];
    for( int j=offsets.x; j<offsets.y; j++ ) {
        ConstraintDist cDistInfo = c_dists[j];
        float oppW = w_s[idxP];
        vec3 oppP = getP(cDistInfo.idx_p);

        vec3 diff = p - oppP;
        float dist = length(diff);
        float C = dist - cDistInfo.ori_dist;
        vec3 dC = diff / dist;

        float denom = w + oppW + alpha;
        if( denom < 0.0000000001 ) {
            continue;
        }
        float lambda = C / denom;
        p -= lambda*w*dC;
    }
    p_s[idxV1] = p.x;
    p_s[idxV2] = p.y;
    p_s[idxV3] = p.z;
}
