#version 460 core
layout(local_size_x = 1, local_size_y = 1) in;


layout(std430, binding=1) buffer buf_p_s {
    float p_s[];
};
layout(std430, binding=3) readonly buffer buf_w_s {
    float w_s[];
};
layout(std430, binding=4) writeonly buffer buf_debugs {
    vec4 debugs[];
};

struct ConstraintDihedralBend {
    ivec4 idx_ps; // edge, opp1, opp2 (16byte)
    float ori_angle; // 4 + 12 padding?
};
layout(std430, binding=5) readonly buffer buf_c_dih_bend_idx_offsets {
    ivec2 c_dih_bend_offsets[];
};
layout(std430, binding=6) readonly buffer buf_c_dih_bend_idxs {
    int c_dih_bend_idxs[];
};
layout(std430, binding=7) readonly buffer buf_c_dih_bends {
    ConstraintDihedralBend c_dih_bends[];
};

const float PI = 3.1415926535;
const float PI90 = 1.57079632679;
const float PI2 = 6.28318530718;

uniform int nr_ptcls;
uniform float alpha;

vec3 getP(int idx) {
    int base = idx*3;
    return vec3(p_s[base], p_s[base+1], p_s[base+2]);
}
float acosApprox(float x) {
    float absX = min(abs(x), 1.0);
    float val = sqrt(1.0 - absX) * (PI90 - 0.175394f*absX);
    return (x<0) ? (PI-val) : (val);
}

void main()
{
    int idxP = int(gl_GlobalInvocationID.x);
    if( idxP>=nr_ptcls ) {
        return;
    }
    if( w_s[idxP]==0.0 ) {
        return;
    }

    vec3 dP = vec3(0);

    ivec2 offsets = c_dih_bend_offsets[idxP];
    for( int i=offsets.x; i<offsets.y; i++ )
    {
        int cDihBendIdx = c_dih_bend_idxs[i];
        ConstraintDihedralBend dihBend = c_dih_bends[cDihBendIdx];
        vec3 p0 = getP(dihBend.idx_ps.x); float w0 = w_s[dihBend.idx_ps.x];
        vec3 p1 = getP(dihBend.idx_ps.y); float w1 = w_s[dihBend.idx_ps.y];
        vec3 p2 = getP(dihBend.idx_ps.z); float w2 = w_s[dihBend.idx_ps.z];
        vec3 p3 = getP(dihBend.idx_ps.w); float w3 = w_s[dihBend.idx_ps.w];
        vec3 e0 = p0 - p1;
        vec3 e1 = p2 - p1;
        vec3 e4 = p3 - p1;
        vec3 e2 = p2 - p0;
        vec3 e3 = p3 - p0;
        float e0Len = length(e0);
        if( e0Len<1.0e-6 )
            continue;
        
        vec3 n1 = cross(e1, e0); float n1sqLen = dot(n1, n1);
        vec3 n2 = cross(e0, e4); float n2sqLen = dot(n2, n2);
        float mulSqLen = n1sqLen*n2sqLen;

        if( mulSqLen<1.0e-24 )
            continue;

        float cosAngle = dot(n1,n2)/sqrt(mulSqLen);
        n1 /= n1sqLen;
        n2 /= n2sqLen;
        
        float aSign = sign(dot(cross(n1, n2), e0));
        float angle = aSign * acosApprox(cosAngle);
        float C = angle - dihBend.ori_angle;
        
        // Ensure the range to [-PI , PI]
        if( C > PI )
            C -= PI2;
        else if( C < -PI )
            C += PI2;
        vec3 u2 = e0Len*n1;
        vec3 u3 = e0Len*n2;
        // vec3 u0 = ( dot(e1,e0)*n1 + dot(e4,e0)*n2 ) / e0Len;
        // vec3 u1 = - u0 - u2 - u3;
        vec3 u1 = -( dot(e1,e0)*n1 + dot(e4,e0)*n2 ) / e0Len;
        vec3 u0 = - u1 - u2 - u3;

        float denom = w0*dot(u0, u0) + w1*dot(u1, u1) + w2*dot(u2, u2) + w3*dot(u3, u3) + alpha;
        if( denom < 1.0e-12 )
            continue;
        float lambda = -C / denom; 

        if( dihBend.idx_ps.x == idxP ) {
            dP += lambda * w0 * u0;
        }
        else if( dihBend.idx_ps.y == idxP ) {
            dP += lambda * w1 * u1;
        }
        else if( dihBend.idx_ps.z == idxP ) {
            dP += lambda * w3 * u2;
        }
        else if( dihBend.idx_ps.w == idxP ) {
            dP += lambda * w3 * u3;
        }
    }

    int idxP1 = idxP*3;
    int idxP2 = idxP1+1;
    int idxP3 = idxP2+1;
    p_s[idxP1] += dP.x;
    p_s[idxP2] += dP.y;
    p_s[idxP3] += dP.z;

    debugs[idxP] = vec4(dP, 0.0);
}
