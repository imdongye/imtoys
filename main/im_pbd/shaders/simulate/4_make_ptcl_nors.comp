#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;

layout(std430, binding=0) readonly buffer buf_x_s {
    float x_s[];
};
layout(std430, binding=1) writeonly buffer buf_nors {
    float nors[];
};
layout(std430, binding=2) readonly buffer buf_ptcl_tris {
    int tris[];
};
layout(std430, binding=3) readonly buffer buf_adj_tri_idxs {
    int adj_tri_idxs[];
};
layout(std430, binding=4) readonly buffer buf_adj_tri_idx_offsets {
    ivec2 adj_tri_idx_offsets[];
};

uniform int nr_ptcls;

vec3 getX(int idx) {
    int base = idx*3;
    return vec3(x_s[base], x_s[base+1], x_s[base+2]);
}

void main()
{
    int idxP = int(gl_GlobalInvocationID.x);
    if( idxP >= nr_ptcls )
        return;

    vec3 ptclN = vec3(0);

    ivec2 offsets = adj_tri_idx_offsets[idxP];
    for( int i=offsets.x; i<offsets.y; i++ ) {
        int idxAdjT = adj_tri_idxs[i];
        int idxTv1 = idxAdjT*3;
        int idxTv2 = idxTv1+1;
        int idxTv3 = idxTv2+1;
        idxTv1 = tris[idxTv1];
        idxTv2 = tris[idxTv2];
        idxTv3 = tris[idxTv3];

        vec3 t1 = getX(idxTv1);
        vec3 t2 = getX(idxTv2);
        vec3 t3 = getX(idxTv3);
        vec3 e1 = t2-t1;
        vec3 e2 = t3-t1;
        vec3 triN = normalize(cross(e1, e2));

        ptclN += triN;
    }

    ptclN = normalize(ptclN);

    int idxP1 = idxP*3;
    int idxP2 = idxP1+1;
    int idxP3 = idxP2+1;
    nors[idxP1] = ptclN.x;
    nors[idxP2] = ptclN.y;
    nors[idxP3] = ptclN.z;
}


