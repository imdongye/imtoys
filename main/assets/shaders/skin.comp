#version 460 core

layout(local_size_x = 16, local_size_y = 16) in;

const int MAX_BONES = 200;
const int MAX_BONE_PER_VERT = 4;
struct VertBoneInfo {
    int idxs[MAX_BONE_PER_VERT];
    float weights[MAX_BONE_PER_VERT];
};


layout(std430, binding=0) readonly buffer pos_buf {
    vec3 poss[];
};
layout(std430, binding=1) readonly buffer nor_buf {
    vec3 nors[];
};
layout(std430, binding=2) readonly buffer bone_infos_buf {
    VertBoneInfo bone_infos[];
};
layout(std430, binding=3) readonly buffer mtx_bone_buf {
    mat4 mtx_Bones[];
};

layout(std430, binding=0) writeonly buffer skinned_pos_buf {
    vec3 skinned_poss[];
};
layout(std430, binding=1) writeonly buffer skinned_nor_buf {
    vec3 skinned_nors[];
};


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    VertBoneInfo boneInfo = bone_infos[idx];

    mat4 mtxBone = mat4(0.f);
    for(int i = 0; i < MAX_BONE_PER_VERT; i++) {
        int boneIdx = boneInfo.idxs[i];
        if(boneIdx == -1) break;
        mtxBone += mtx_Bones[boneIdx] * boneInfo.weights[i];
    }
    vec3 aPos = poss[idx];
    vec3 aNor = nors[idx];
    skinned_poss[idx] = vec3(mtxBone * vec4(poss[idx], 1.f));
    skinned_nors[idx] = normalize(vec3(mtxBone * vec4(nors[idx], 0.f)));
}