#version 460 core

layout(local_size_x = 16, local_size_y = 16) in;

const int MAX_BONES = 200;
const int MAX_BONE_PER_VERT = 4;
struct VertBoneInfo {
    int idxs[MAX_BONE_PER_VERT];
    float weights[MAX_BONE_PER_VERT];
};


layout(std430, binding=0) readonly buffer pos_buf {
    vec4 poss[];
};
layout(std430, binding=1) readonly buffer nor_buf {
    vec4 nors[];
};
layout(std430, binding=2) readonly buffer bone_infos_buf {
    VertBoneInfo bone_infos[];
};
layout(std430, binding=3) readonly buffer mtx_bone_buf {
    mat4 mtx_Bones[];
};

layout(std430, binding=0) writeonly buffer skinned_pos_buf {
    vec4 skinned_poss[];
};
layout(std430, binding=1) writeonly buffer skinned_nor_buf {
    vec4 skinned_nors[];
};


void main()
{
    mat4 mtxBone = mat4(0.f);
    for(int i = 0; i < MAX_BONE_PER_VERT; i++) {
        if(aBoneIdxs[i] == -1) break;
        mtxBone += mtx_Bones[aBoneIdxs[i]] * aBoneWeights[i];
    }
    sPos = vec3(mtxBone * vec4(aPos, 1.f));
    sNor = vec3(mtxBone * vec4(aNor, 0.f));
    sNor = normalize(sNor);
}